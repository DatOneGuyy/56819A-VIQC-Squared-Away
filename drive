#pragma config(Sensor, port1,  color2,         sensorVexIQ_LED)
#pragma config(Sensor, port3,  color1,         sensorVexIQ_LED)
#pragma config(Sensor, port6,  gyro,           sensorVexIQ_Gyro)
#pragma config(Sensor, port7,  color3,         sensorVexIQ_LED)
#pragma config(Sensor, port9,  color4,         sensorVexIQ_LED)
#pragma config(Motor,  motor2,          rightdrive,    tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor4,          armright,      tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor8,          leftdrive,     tmotorVexIQ, PIDControl, reversed, encoder)
#pragma config(Motor,  motor10,         armleft,       tmotorVexIQ, PIDControl, reversed, encoder)
#pragma config(Motor,  motor12,         strafe,        tmotorVexIQ, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

float e = 2.71828459045;
int k = 4000;
int gear = 1;

void setup() {
	resetMotorEncoder(armright);
	resetMotorEncoder(armleft);
	resetMotorEncoder(strafe);
	resetMotorEncoder(rightdrive);
	resetMotorEncoder(leftdrive);
	setGyroSensitivity(gyro, gyroNormalSensitivity);
	resetGyro(gyro);
}

void driveReset() {
	setMotorSpeed(leftdrive, 0);
	setMotorSpeed(rightdrive, 0);
	resetMotorEncoder(rightdrive);
	resetMotorEncoder(leftdrive);
}

void forward(int ticks, int speed) {
	setMotorSpeed(rightdrive, speed);
	setMotorSpeed(leftdrive, speed);
	sleep(ticks);
	setMotorSpeed(rightdrive, 0);
	setMotorSpeed(leftdrive, 0);
}

void turnLeft(int degrees, int speed) {
	setup();
	while (abs(getGyroDegrees(gyro)) < degrees) {
		if (getJoystickValue(BtnEDown) == 1) {
			break;
		}
		setMotorSpeed(leftdrive, -speed);
		setMotorSpeed(rightdrive, speed);
	}
	driveReset();
}

void turnRight(int degrees, int speed) {
	setup();
	while (abs(getGyroDegrees(gyro)) < degrees) {
		if (getJoystickValue(BtnEDown) == 1) {
			break;
		}
		setMotorSpeed(leftdrive, speed);
		setMotorSpeed(rightdrive, -speed);
	}
	driveReset();
}

void s(int ticks, int speed) {
	setMotorSpeed(strafe, speed);
	sleep(ticks);
	setMotorSpeed(strafe, 0);
}

void arm(int time, int speed) {
	setup();
	setMotorSpeed(armleft, speed);
	setMotorSpeed(armright, speed);
	sleep(time);
	setMotorSpeed(armleft, 0);
	setMotorSpeed(armright, 0);
}

void stack() {
	forward(400, 60);
	s(1000, -100);
	turnRight(30, 30);
	forward(1400, 35);
	arm(600, 80);
	turnLeft(20, 17);
	forward(1700, -60);
	arm(600, -80);
	arm(600, 80);
	s(850, 100);
	forward(3800, 40);
	arm(400, -80);
	forward(300, -40);
}

void stack2() {
	forward(400, 60);
	s(1000, 100);
	turnLeft(30, 30);
	forward(1400, 40);
	arm(600, 80);
	turnRight(20, 17);
	forward(1700, 60);
	arm(300, -80);
	forward(250, -50);
}

int map(int value) {
	int output;
	/*
	if (value > 0) {
		output = (-3892.66 / (-16.3197 - 12.0418 * pow(e, -0.0000684501 * pow(value + 2.80637, 2.41562))) - 137.3);
	} else if (value < 0) {
		output = -(-3892.66 / (-16.3197 - 12.0418 * pow(e, -0.0000684501 * pow(abs(value) + 2.80637, 2.41562))) - 137.3);
	} else {
		output = 0;
	}
	return output;
	*/
	return 0;
}

int t = 0;
int mode = 0;
int larm;

task main() {
	hogCPU();
	setup();
	setTouchLEDColor(color1, colorViolet);
	setTouchLEDColor(color2, colorViolet);
	setTouchLEDColor(color3, colorViolet);
	setTouchLEDColor(color4, colorViolet);
	while (true) {
		larm = getMotorEncoder(armleft);
		if (mode == 0) {
		t++;
			if (t % k * 6 < k ) {
				setTouchLEDColor(color1, colorRed);
				setTouchLEDColor(color2, colorRed);
				setTouchLEDColor(color3, colorRed);
				setTouchLEDColor(color4, colorRed);
			} else if (t % k * 6 < 2 * k) {
				setTouchLEDColor(color1, colorOrange);
				setTouchLEDColor(color2, colorOrange);
				setTouchLEDColor(color3, colorOrange);
				setTouchLEDColor(color4, colorOrange);
			} else if (t % k * 6 < 3 * k) {
				setTouchLEDColor(color1, colorYellow);
				setTouchLEDColor(color2, colorYellow);
				setTouchLEDColor(color3, colorYellow);
				setTouchLEDColor(color4, colorYellow);
			} else if (t % k * 6 < 4 * k) {
				setTouchLEDColor(color1, colorGreen);
				setTouchLEDColor(color2, colorGreen);
				setTouchLEDColor(color3, colorGreen);
				setTouchLEDColor(color4, colorGreen);
			} else if (t % k * 6 < 5 * k) {
				setTouchLEDColor(color1, colorBlue);
				setTouchLEDColor(color2, colorBlue);
				setTouchLEDColor(color3, colorBlue);
				setTouchLEDColor(color4, colorBlue);
			} else {
				setTouchLEDColor(color1, colorViolet);
				setTouchLEDColor(color2, colorViolet);
				setTouchLEDColor(color3, colorViolet);
				setTouchLEDColor(color4, colorViolet);
			}
		}
		displayCenteredTextLine(1, "%d", larm);
		if (gear == 1) {
			setMotorSpeed(leftdrive, getJoystickValue(ChA));
			setMotorSpeed(rightdrive, getJoystickValue(ChD));
		} else {
			setMotorSpeed(leftdrive, 0.6 * getJoystickValue(ChA));
			setMotorSpeed(rightdrive, 0.6 * getJoystickValue(ChD));
		}
		setMotorSpeed(strafe, 0.5 * abs(getJoystickValue(ChB)) >= 40 ? getJoystickValue(ChB) : 0 + 0.5 * abs(getJoystickValue(ChC)) >= 40 ? getJoystickValue(ChC) : 0);
		if (getJoystickValue(BtnFUp) == 1) {
			setup();

//kevin kevin kevin
		}
		if (getJoystickValue(BtnFDown) == 1) {
			setMotorSpeed(armleft, -127);
			setMotorSpeed(armright, -127);
			sleep(1200);
			setMotorSpeed(armleft, 0);
			setMotorSpeed(armright, 0);
			setup();
		}
		if (getJoystickValue(BtnLUp) == 1 && getJoystickValue(BtnLDown) == 0 && getMotorEncoder(armleft) < 270) {
			setMotorSpeed(armleft, 80);
			setMotorSpeed(armright, 80);
		} else if (getJoystickValue(BtnLDown) == 1 && getJoystickValue(BtnLUp) == 0) {
			setMotorSpeed(armleft, -80);
			setMotorSpeed(armright, -80);
		} else {
			setMotorSpeed(armleft, 0);
			setMotorSpeed(armright, 0);
		}
		if (getJoystickValue(BtnRUp) == 1) {
			gear = 1;
		} else if (getJoystickValue(BtnRDown) == 1) {
			gear = 0;
		}
		if (getJoystickValue(BtnEUp) == 1) {
			stack();
		} else if (getJoystickValue(BtnEDown) == 1) {
			stack2();
		}
		/*
		if (getJoystickValue(BtnRUp) == 1 && getJoystickValue(BtnRDown) == 0) {
			setMotorSpeed(claw, 100);
		} else if (getJoystickValue(BtnRDown) == 1 && getJoystickValue(BtnRUp) == 0) {
			setMotorSpeed(claw, -100);
		} else {
			setMotorSpeed(claw, 0);
		}
		*/

	}
}
