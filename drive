#pragma config(Sensor, port2,  color1,         sensorVexIQ_LED)
#pragma config(Sensor, port3,  gyro,           sensorVexIQ_Gyro)
#pragma config(Sensor, port4,  ultra3,         sensorVexIQ_Distance)
#pragma config(Sensor, port7,  color2,         sensorVexIQ_LED)
#pragma config(Sensor, port11, ultra1,         sensorVexIQ_Distance)
#pragma config(Sensor, port12, ultra2,         sensorVexIQ_Distance)
#pragma config(Motor,  motor1,          strafe,        tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor5,          arm,           tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor6,          dropper,       tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor8,          leftdrive,     tmotorVexIQ, PIDControl, reversed, driveLeft, encoder)
#pragma config(Motor,  motor9,          rightdrive,    tmotorVexIQ, PIDControl, driveRight, encoder)
#pragma config(Motor,  motor10,         spintake,      tmotorVexIQ, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

float e = 2.71828459045;
int k = 4000;
bool gear = true;

int dropDelay = 250;

bool sucking = false;
bool barfing = false;

void setup() {
	setMotorSpeed(leftdrive, 0);
	setMotorSpeed(rightdrive, 0);
	setMotorSpeed(strafe, 0);
	setMotorSpeed(arm, 0);
	setMotorSpeed(dropper, 0);
	setMotorSpeed(spintake, 0);
	resetMotorEncoder(arm);
	resetMotorEncoder(strafe);
	resetMotorEncoder(rightdrive);
	resetMotorEncoder(leftdrive);
	resetMotorEncoder(dropper);
	resetMotorEncoder(spintake);
	setGyroSensitivity(gyro, gyroNormalSensitivity);
	resetGyro(gyro);
}

void driveReset() {
	setMotorSpeed(leftdrive, 0);
	setMotorSpeed(rightdrive, 0);
	setMotorSpeed(strafe, 0);
	resetMotorEncoder(rightdrive);
	resetMotorEncoder(leftdrive);
	resetMotorEncoder(strafe);
}

void forward(int ticks, int speed) {
	driveReset();
	while (abs(ticks) > abs(getMotorEncoder(leftdrive)) * 0.5 + abs(getMotorEncoder(rightdrive)) * 0.5) {
		setMotorSpeed(leftdrive, speed);
		setMotorSpeed(rightdrive, speed);
	}
	driveReset();
}

void turnLeft(int degrees, int speed) {
	setup();
	while (abs(degrees) > abs(getGyroDegrees(gyro))) {
		setMotorSpeed(leftdrive, speed);
		setMotorSpeed(rightdrive, -speed);
	}
	driveReset();
}

void turnRight(int degrees, int speed) {
	setup();
	while (abs(degrees) > abs(getGyroDegrees(gyro))) {
		setMotorSpeed(leftdrive, -speed);
		setMotorSpeed(rightdrive, speed);
	}
	driveReset();
}

//true = left, false = right
//ticks > 0 and speed > 0
void s(int ticks, int speed, bool dir) {
	driveReset();
	while (ticks > abs(getMotorEncoder(strafe))) {
		setMotorSpeed(strafe, speed * dir ? -1 : 1);
	}
	driveReset();
}

void a(int ticks, int speed) {
	setup();
	setMotorSpeed(arm, speed);
	sleep(ticks);
	setMotorSpeed(arm, 0);
	setup();
}

void togglesucking() {
	if (!sucking) {
		setMotorSpeed(spintake, 127);
	} else {
		setMotorSpeed(spintake, 0);
	}	
}

void togglebarfing() {
	if (!barfing) {
		setMotorSpeed(spintake, -127);
	} else {
		setMotorSpeed(spintake, 0);
	}
}

void drop() {
	setup();
	while (abs(getMotorEncoder(dropper)) < 90) {
		setMotorSpeed(dropper, 30);
	}
	sleep(dropDelay);
	while (abs(getMotorEncoder(dropper)) > 0) {
		setMotorSpeed(dropper, -30);
	}
	setup();
}

void stack() { //deprecated
	forward(500, 60);
	s(1000, -100, true);
	turnRight(28, 30);
	forward(1500, 35);
	a(600, 80);
	turnLeft(20, 17);
	forward(1700, -60);
	a(600, -80);
	a(600, 80);
	s(850, 100, false);
	forward(3800, 40);
	a(400, -80);
	forward(300, -40);
}

void stack2() { //deprecated
	forward(400, 60);
	s(1000, 100, false);
	turnLeft(30, 30);
	forward(1400, 40);
	a(600, 80);
	turnRight(20, 17);
	forward(1700, 60);
	a(300, -80);
	forward(250, -50);
}

int mapFast(int value) {
	float A = 633.992;
	float C = -4.36118;
	float b = -5.4813;
	float c = 101.126;
	float k = -1.90005;
	float a = -0.0000200555;
	float n = 2.66124;
	float power = -a * pow(value - b, n);
	float denominator = k + C * pow(e, power);
	return value != 0 ? round((A / denominator + c) * (abs(value) / value)) : 0;
}

int mapSlow(int value) {
	float A = 380.95;
	float C = -4.36118;
	float b = -5.4813;
	float c = 60.6755;
	float k = -1.90005;
	float a = -0.0000200555;
	float n = 2.66124;
	float power = -a * pow(value - b, n);
	float denominator = k + C * pow(e, power);
	return value != 0 ? round((A / denominator + c) * (abs(value) / value)) : 0;
}

int t = 0;
int mode = 0;
int larm;

int dropState = 0;

task main() {
	hogCPU();
	setup();
	setTouchLEDColor(color1, colorViolet);
	setTouchLEDColor(color2, colorViolet);
	while (true) {
		larm = getMotorEncoder(arm);
		if (mode == 0) {
		t++;
			if (t % k * 6 < k ) {
				setTouchLEDColor(color1, colorRed);
				setTouchLEDColor(color2, colorRed);
			} else if (t % k * 6 < 2 * k) {
				setTouchLEDColor(color1, colorOrange);
				setTouchLEDColor(color2, colorOrange);
			} else if (t % k * 6 < 3 * k) {
				setTouchLEDColor(color1, colorYellow);
				setTouchLEDColor(color2, colorYellow);
			} else if (t % k * 6 < 4 * k) {
				setTouchLEDColor(color1, colorGreen);
				setTouchLEDColor(color2, colorGreen);
			} else if (t % k * 6 < 5 * k) {
				setTouchLEDColor(color1, colorBlue);
				setTouchLEDColor(color2, colorBlue);
			} else {
				setTouchLEDColor(color1, colorViolet);
				setTouchLEDColor(color2, colorViolet);
			}
		}
		
		displayCenteredTextLine(1, "%d", larm);
		
		setMotorSpeed(leftdrive, gear ? mapFast(getJoystickValue(ChA)) : mapSlow(getJoystickValue(ChA)));
		setMotorSpeed(rightdrive, gear ? mapFast(getJoystickValue(ChD)) : mapSlow(getJoystickValue(ChD)));
		setMotorSpeed(strafe, 0.5 * abs(getJoystickValue(ChB)) >= 40 ? getJoystickValue(ChB) : 0 + 0.5 * abs(getJoystickValue(ChC)) >= 40 ? getJoystickValue(ChC) : 0);
		
		if (getJoystickValue(BtnFUp) == 1) {
			setup();
		}
		
		if (getJoystickValue(BtnLUp) == 1 && getJoystickValue(BtnLDown) == 0) {
			setMotorSpeed(arm, 100);
		} else if (getJoystickValue(BtnLDown) == 1 && getJoystickValue(BtnLUp) == 0) {
			setMotorSpeed(arm, -100);
		} else {
			setMotorSpeed(arm, 0);
		}
		
		if (getJoystickValue(BtnEUp) == 1) {
			gear = true;
		} else if (getJoystickValue(BtnEDown) == 1) {
			gear = false;
		}
		
		if (getJoystickValue(BtnFDown) == 1) {
			dropState = 1;
		}
		
		switch (dropState) {
			case 0:
				dropState = 0;
				break;
			case 1:
				resetMotorEncoder(dropper);
				if (abs(getMotorEncoder(dropper)) >= 88) {
					dropState = 2;
					setMotorSpeed(dropper, 0);
					sleep(150);
				} else {
					setMotorSpeed(dropper, 30);
				}
				break;
			case 2:
				if (abs(getMotorEncoder(dropper)) <= 2) {
					dropState = 0;
				} else {
					setMotorSpeed(dropper, -30);
				}
				break;
			default:
				dropState = 0;
				break;
		}
		
		if (getJoystickValue(BtnRUp) == 1 && getJoystickValue(BtnRDown) == 0) {
			setMotorSpeed(spintake, 100);
		} else if (getJoystickValue(BtnRDown) == 1 && getJoystickValue(BtnRUp) == 0) {
			setMotorSpeed(spintake, -100);
		} else {
			setMotorSpeed(spintake, 0);
		}
		

	}
}
