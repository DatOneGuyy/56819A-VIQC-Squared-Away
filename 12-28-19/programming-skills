#pragma config(Sensor, port1,  color1,         sensorVexIQ_LED)
#pragma config(Sensor, port2,  gyro,           sensorVexIQ_Gyro)
#pragma config(Sensor, port3,  color2,         sensorVexIQ_LED)
#pragma config(Sensor, port4,  color3,         sensorVexIQ_LED)
#pragma config(Sensor, port6,  color5,         sensorVexIQ_LED)
#pragma config(Sensor, port8,  color4,         sensorVexIQ_LED)
#pragma config(Motor,  motor5,          dropper,       tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor7,          frontarm,      tmotorVexIQ, PIDControl, reversed, encoder)
#pragma config(Motor,  motor9,          spintake,      tmotorVexIQ, PIDControl, reversed, encoder)
#pragma config(Motor,  motor10,         leftdrive,     tmotorVexIQ, PIDControl, reversed, driveLeft, encoder)
#pragma config(Motor,  motor11,         rightdrive,    tmotorVexIQ, PIDControl, driveRight, encoder)
#pragma config(Motor,  motor12,         backarm,       tmotorVexIQ, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

int t = 0;
int t_2 = 0;
int cycle = 42;

int leftspeed;
int rightspeed;

bool backarmup = false;

bool previousFramePressed = false;
bool previousFramePressedEUp = false;
bool previousFramePressedEDown = false;

int spintakeState = 0;

bool gear = true;

void color(unsigned short c) {
	setTouchLEDHue(color2, c);
	setTouchLEDHue(color5, c);
	setTouchLEDHue(color4, c);
	setTouchLEDHue(color3, c);
	setTouchLEDHue(color1, c);
}

void setup() {
	setMotorSpeed(dropper, 0);
	setMotorSpeed(frontarm, 0);
	setMotorSpeed(spintake, 0);
	setMotorSpeed(leftdrive, 0);
	setMotorSpeed(rightdrive, 0);
	setMotorSpeed(backarm, 0);
	resetMotorEncoder(dropper);
	resetMotorEncoder(frontarm);
	resetMotorEncoder(spintake);
	resetMotorEncoder(leftdrive);
	resetMotorEncoder(rightdrive);
	resetMotorEncoder(backarm);
	resetGyro(gyro);
}

void driveReset() {
	setMotorSpeed(leftdrive, 0);
	setMotorSpeed(rightdrive, 0);
	resetMotorEncoder(leftdrive);
	resetMotorEncoder(rightdrive);
}

void updateDriver() {
	if (getJoystickValue(BtnLUp) == 1 && getJoystickValue(BtnLDown) == 0) {
		setMotorSpeed(frontarm, 100);
	} else if (getJoystickValue(BtnLDown) == 1 && getJoystickValue(BtnLUp) == 0) {
		setMotorSpeed(frontarm, -100);
	} else {
		setMotorSpeed(frontarm, 0);
	}

	if (getJoystickValue(BtnRUp) == 1 && getJoystickValue(BtnRDown) == 0 && getMotorEncoder(backarm) < 60) {
		setMotorSpeed(backarm, 100);
		backarmup = true;
	} else if (getJoystickValue(BtnRDown) == 1 && getJoystickValue(BtnRUp) == 0 && getMotorEncoder(backarm) > 0) {
		setMotorSpeed(backarm, -100);
		backarmup = false;
	} else {
		setMotorSpeed(backarm, backarmup ? 30 : 0);
	}

	if (getJoystickValue(BtnEDown) == 0 && previousFramePressedEDown) {
		previousFramePressedEDown = false;
	} else if (getJoystickValue(BtnEDown) == 1 && !previousFramePressedEDown) {
		spintakeState--;
		previousFramePressedEDown = true;
	}

	if (getJoystickValue(BtnEUp) == 0 && previousFramePressedEUp) {
		previousFramePressedEUp = false;
	} else if (getJoystickValue(BtnEUp) == 1 && !previousFramePressedEUp) {
		spintakeState++;
		previousFramePressedEUp = true;
	}

	if (getJoystickValue(BtnLUp) == 1 || getJoystickValue(BtnLDown) == 1) {
		spintakeState = 20000;
	}

	if (spintakeState == 20000) {
		spintakeState = 0;
	} else if (spintakeState < -1) {
		spintakeState = -1;
	} else if (spintakeState > 1) {
		spintakeState = 1;
	}

	if (getJoystickValue(BtnFDown) == 0 && previousFramePressed) {
		previousFramePressed = false;
	} else if (getJoystickValue(BtnFDown) == 1 && !previousFramePressed) {
		gear = !gear;
		previousFramePressed = true;
	}

	if (getJoystickValue(BtnFDown) == 0 && previousFramePressed) {
		previousFramePressed = false;
	} else if (getJoystickValue(BtnFDown) == 1 && !previousFramePressed) {
		gear = !gear;
		previousFramePressed = true;
	}

	leftspeed = getJoystickValue(ChA) * getJoystickValue(ChA) * getJoystickValue(ChA) / 10000 * (gear ? 1 : 0.6) * (abs(getJoystickValue(ChA)) > 10 ? 1 : 0);
	rightspeed = getJoystickValue(ChD) * getJoystickValue(ChD) * getJoystickValue(ChD) / 10000 * (gear ? 1 : 0.6) * (abs(getJoystickValue(ChD)) > 10 ? 1 : 0);

	setMotorSpeed(spintake, spintakeState * 100);
	setMotorSpeed(leftdrive, leftspeed);
	setMotorSpeed(rightdrive, rightspeed);
}

task drop() {
	while (true) {
		if (getJoystickValue(BtnFUp) == 1) {
			setMotorSpeed(dropper, -100);
			sleep(300);
			setMotorSpeed(dropper, 100);
			sleep(300);
			setMotorSpeed(dropper, 10);
		}
	}
}

task rgb() {
	color(0);
	while (true) {
		t++;
		if (t % 10 == 9){
			t_2++;
		}
		color(t_2 % 255);
	}
}

int sign(int value) {
	return value == 0 ? 0 : abs(value) / value;
}

void forward(int ticks, int speed = 70) {
	moveMotorTarget(leftdrive, ticks * sign(speed), speed);
	moveMotorTarget(rightdrive, ticks * sign(speed), speed);
	waitUntilMotorStop(leftdrive);
	setMotorSpeed(leftdrive, 0);
	setMotorSpeed(rightdrive, 0);
}

void turnLeft(int degrees, int speed) {
	setup();
	while (abs(degrees) > abs(getGyroDegrees(gyro))) {
		setMotorSpeed(leftdrive, -speed);
		setMotorSpeed(rightdrive, speed);
	}
	driveReset();
}

void turnRight(int degrees, int speed) {
	setup();
	while (abs(degrees) > abs(getGyroDegrees(gyro))) {
		setMotorSpeed(leftdrive, speed);
		setMotorSpeed(rightdrive, -speed);
	}
	driveReset();
}

void a(int ticks, int speed) {
	setMotorSpeed(frontarm, speed);
	sleep(ticks);
	setMotorSpeed(frontarm, 0);
	setup();
}

void back(int speed, int ticks) {
	setMotorSpeed(backarm, speed);
	sleep(ticks);
	setMotorSpeed(backarm, 0);
}

void swingRight(int ticks, int speed = 70) {
	moveMotorTarget(rightdrive, ticks, speed);
	waitUntilMotorStop(rightdrive);
	driveReset();
}

void swingLeft(int ticks, int speed = 70) {
	moveMotorTarget(leftdrive, ticks, speed);
	waitUntilMotorStop(leftdrive);
	driveReset();
}

void swingRightGyro(int ticks, int speed = 70) {
	resetGyro(gyro);
	while (abs(getGyroDegrees(gyro)) < ticks) {
		setMotorSpeed(rightdrive, speed);
	}
	setMotorSpeed(rightdrive, 0);
}

void swingLeftGyro(int ticks, int speed = 70) {
	resetGyro(gyro);
	while (abs(getGyroDegrees(gyro)) < ticks) {
		setMotorSpeed(leftdrive, speed);
	}
	setMotorSpeed(leftdrive, 0);
}

int taps = 0;

task main() {
	setup();
	startTask(drop);
	startTask(rgb);
	while (true) {
		if (getTouchLEDValue(color5) == 1 && taps == 0) {
			taps++;
			swingLeft(100);
			swingRight(200);
			driveReset();
			forward(100, 30);
			setMotorSpeed(frontarm, 100);
			sleep(600);
			swingRightGyro(116, 40);
			setMotorSpeed(frontarm, 0);
			forward(550, 70);
			setMotorSpeed(frontarm, -100);
			sleep(600);
			setMotorSpeed(frontarm, 0);
			forward(100, -70);
		} else if (getTouchLEDValue(color5) == 1 && taps == 1) {
			taps++;
			setMotorSpeed(frontarm, -80);
			swingRightGyro(135, 50);
			setMotorSpeed(frontarm, 0);
			swingLeftGyro(73, 50);
			forward(300, 30);
			a(1300, 100);
			swingLeftGyro(82, 50);
			forward(590, 80);
			swingRight(70, 80);
			a(600, -100);
			forward(200, -70);
			updateDriver();
		} else if (getTouchLEDValue(color5) == 1 && taps == 2) {
			taps++;
			setMotorSpeed(frontarm, -70);
			swingLeft(100);
			swingRight(200);
			setMotorSpeed(frontarm, 0);
			driveReset();
			forward(100, 30);
			a(1200, 100);
			swingLeft(52, 50);
			forward(470, 80);
			a(500, -100);
		} else if (getTouchLEDValue(color5) == 1 && taps == 3) {
			taps++;
			turnRight(73, 50);
			forward(200, -30);
			setMotorSpeed(backarm, 100);
			sleep(200);
			setMotorSpeed(frontarm, 0);
			swingRightGyro(20, 30);
			forward(1100, 100);
			swingLeft(300);
			forward(410, 70);
			swingRight(265);
			a(400, -100);
			forward(400, 40);
			a(1000, 100);
			swingRightGyro(90);
			forward(80, -100);
			setMotorSpeed(backarm, -30);
			swingRightGyro(60);
			forward(1500, 100);
			swingRightGyro(70);
			a(800, -100);
			forward(800, 100);
			forward(200, -100);
		}
		
		if (taps >= 4) {
			taps = 0;
		}
	}
}
